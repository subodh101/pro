{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Timeline About Me A Passionate software engineer with 5+ years of experience in CI/CD, Production Microservices, Kubernetes, ML Infrastructure, and more for one of the biggest customer-facing app in Japan with over 100M+ users. April 2023 Attended KubeCon + CloudNativeCon Europe 2023, Amsterdam November 2020 Attended KubeCon + CloudNativeCon North America 2020, Virtual Online September 2020 Promoted to ML Platform Engineer November 2019 Obtained Associate Cloud Engineer Certification from Google cloud June 2019 Obtained Neural Network and Deep Learning Certificate from Coursera April 2019 Attended SysML Conference 2019, Stanford, CA October 2018 Joined Mercari as Machine Learning Engineer March 2018 Graduated from IIT Delhi in Mathematics and Computing","title":"Timeline"},{"location":"#timeline","text":"","title":"Timeline"},{"location":"#about-me","text":"A Passionate software engineer with 5+ years of experience in CI/CD, Production Microservices, Kubernetes, ML Infrastructure, and more for one of the biggest customer-facing app in Japan with over 100M+ users.","title":"About Me"},{"location":"#april-2023","text":"Attended KubeCon + CloudNativeCon Europe 2023, Amsterdam","title":"April 2023"},{"location":"#november-2020","text":"Attended KubeCon + CloudNativeCon North America 2020, Virtual Online","title":"November 2020"},{"location":"#september-2020","text":"Promoted to ML Platform Engineer","title":"September 2020"},{"location":"#november-2019","text":"Obtained Associate Cloud Engineer Certification from Google cloud","title":"November 2019"},{"location":"#june-2019","text":"Obtained Neural Network and Deep Learning Certificate from Coursera","title":"June 2019"},{"location":"#april-2019","text":"Attended SysML Conference 2019, Stanford, CA","title":"April 2019"},{"location":"#october-2018","text":"Joined Mercari as Machine Learning Engineer","title":"October 2018"},{"location":"#march-2018","text":"Graduated from IIT Delhi in Mathematics and Computing","title":"March 2018"},{"location":"tools/gcloud/","text":"glcoud Google Cloud Platform (GCP) provides a command-line interface called gcloud that allows you to manage various aspects of your GCP resources. Below are some common gcloud commands and their usage: Authentication and Configuration: gcloud auth login: Initiates the login process to authenticate with your Google Cloud account. gcloud config set project PROJECT_ID: Sets the default GCP project to be used. gcloud config set compute/zone ZONE: Sets the default compute zone. gcloud config set compute/region REGION: Sets the default compute region. gcloud auth application-default login: Authorizes application-default credentials for your local environment. Compute Engine: gcloud compute instances create INSTANCE_NAME: Creates a new Compute Engine virtual machine instance. gcloud compute instances list: Lists all Compute Engine instances in your project. gcloud compute ssh INSTANCE_NAME: SSH into a Compute Engine instance. gcloud compute firewall-rules create RULE_NAME --allow=PORT: Creates a firewall rule to allow traffic to a specific port. Storage (Google Cloud Storage): gcloud storage buckets create BUCKET_NAME: Creates a new Cloud Storage bucket. gcloud storage buckets list: Lists all Cloud Storage buckets in your project. gcloud storage cp LOCAL_FILE gs://BUCKET_NAME/REMOTE_DIRECTORY: Copies a local file to a Cloud Storage bucket. gcloud storage ls gs://BUCKET_NAME: Lists objects in a Cloud Storage bucket. BigQuery: gcloud bigquery datasets create DATASET_NAME: Creates a new BigQuery dataset. gcloud bigquery datasets list: Lists all BigQuery datasets in your project. bq query --nouse_legacy_sql 'SQL_QUERY': Runs a BigQuery SQL query from the command line. App Engine: gcloud app create: Creates a new App Engine application. gcloud app deploy: Deploys the current directory as an App Engine application. gcloud app versions list: Lists all deployed versions of an App Engine application. Kubernetes Engine (GKE): gcloud container clusters create CLUSTER_NAME: Creates a new GKE cluster. gcloud container clusters get-credentials CLUSTER_NAME: Configures kubectl to use the GKE cluster. kubectl get pods: Lists Kubernetes pods in the current cluster. IAM and Permissions: gcloud projects add-iam-policy-binding PROJECT_ID --member=USER_OR_GROUP --role=ROLE: Grants IAM permissions to a user or group on a project. Cloud Functions: gcloud functions deploy FUNCTION_NAME --runtime RUNTIME --trigger-http: Deploys a Cloud Function. gcloud functions list: Lists all Cloud Functions in your project. Note These are just a few examples of the many gcloud commands available for managing different Google Cloud services. You can get detailed help for any command by appending --help to it (e.g., gcloud compute instances create --help). Additionally, the GCP documentation provides comprehensive information on gcloud commands and their usage for each service.","title":"glcoud"},{"location":"tools/gcloud/#glcoud","text":"Google Cloud Platform (GCP) provides a command-line interface called gcloud that allows you to manage various aspects of your GCP resources. Below are some common gcloud commands and their usage:","title":"glcoud"},{"location":"tools/gcloud/#authentication-and-configuration","text":"gcloud auth login: Initiates the login process to authenticate with your Google Cloud account. gcloud config set project PROJECT_ID: Sets the default GCP project to be used. gcloud config set compute/zone ZONE: Sets the default compute zone. gcloud config set compute/region REGION: Sets the default compute region. gcloud auth application-default login: Authorizes application-default credentials for your local environment.","title":"Authentication and Configuration:"},{"location":"tools/gcloud/#compute-engine","text":"gcloud compute instances create INSTANCE_NAME: Creates a new Compute Engine virtual machine instance. gcloud compute instances list: Lists all Compute Engine instances in your project. gcloud compute ssh INSTANCE_NAME: SSH into a Compute Engine instance. gcloud compute firewall-rules create RULE_NAME --allow=PORT: Creates a firewall rule to allow traffic to a specific port.","title":"Compute Engine:"},{"location":"tools/gcloud/#storage-google-cloud-storage","text":"gcloud storage buckets create BUCKET_NAME: Creates a new Cloud Storage bucket. gcloud storage buckets list: Lists all Cloud Storage buckets in your project. gcloud storage cp LOCAL_FILE gs://BUCKET_NAME/REMOTE_DIRECTORY: Copies a local file to a Cloud Storage bucket. gcloud storage ls gs://BUCKET_NAME: Lists objects in a Cloud Storage bucket.","title":"Storage (Google Cloud Storage):"},{"location":"tools/gcloud/#bigquery","text":"gcloud bigquery datasets create DATASET_NAME: Creates a new BigQuery dataset. gcloud bigquery datasets list: Lists all BigQuery datasets in your project. bq query --nouse_legacy_sql 'SQL_QUERY': Runs a BigQuery SQL query from the command line. App Engine: gcloud app create: Creates a new App Engine application. gcloud app deploy: Deploys the current directory as an App Engine application. gcloud app versions list: Lists all deployed versions of an App Engine application.","title":"BigQuery:"},{"location":"tools/gcloud/#kubernetes-engine-gke","text":"gcloud container clusters create CLUSTER_NAME: Creates a new GKE cluster. gcloud container clusters get-credentials CLUSTER_NAME: Configures kubectl to use the GKE cluster. kubectl get pods: Lists Kubernetes pods in the current cluster.","title":"Kubernetes Engine (GKE):"},{"location":"tools/gcloud/#iam-and-permissions","text":"gcloud projects add-iam-policy-binding PROJECT_ID --member=USER_OR_GROUP --role=ROLE: Grants IAM permissions to a user or group on a project.","title":"IAM and Permissions:"},{"location":"tools/gcloud/#cloud-functions","text":"gcloud functions deploy FUNCTION_NAME --runtime RUNTIME --trigger-http: Deploys a Cloud Function. gcloud functions list: Lists all Cloud Functions in your project. Note These are just a few examples of the many gcloud commands available for managing different Google Cloud services. You can get detailed help for any command by appending --help to it (e.g., gcloud compute instances create --help). Additionally, the GCP documentation provides comprehensive information on gcloud commands and their usage for each service.","title":"Cloud Functions:"},{"location":"tools/kubectl/","text":"kubectl Kubernetes (K8s) is a powerful container orchestration platform with a rich set of command-line tools (kubectl) for managing and interacting with Kubernetes clusters. Here are some common kubectl commands and their usage: Cluster Management: kubectl cluster-info: Display cluster information, including the Kubernetes API server address. kubectl config get-contexts: List available Kubernetes contexts (clusters, users, and namespaces). kubectl config use-context CONTEXT_NAME: Set the active context to switch between clusters. Pod Management: kubectl get pods: List all pods in the current namespace. kubectl describe pod POD_NAME: Display detailed information about a pod. kubectl create -f POD_DEFINITION.yaml: Create a pod using a YAML or JSON file. kubectl delete pod POD_NAME: Delete a pod. kubectl exec -it POD_NAME -- COMMAND: Execute a command inside a running pod. Service Management: kubectl get services: List all services in the current namespace. kubectl expose pod POD_NAME --port=SERVICE_PORT --type=SERVICE_TYPE: Create a service to expose a pod. kubectl delete service SERVICE_NAME: Delete a service. Deployment Management: kubectl get deployments: List all deployments in the current namespace. kubectl create deployment DEPLOYMENT_NAME --image=IMAGE_NAME: Create a deployment. kubectl rollout status deployment/DEPLOYMENT_NAME: Check the status of a deployment rollout. kubectl rollout undo deployment/DEPLOYMENT_NAME: Rollback a deployment to a previous version. ConfigMaps and Secrets: kubectl create configmap CONFIGMAP_NAME --from-file=KEY=VALUE: Create a ConfigMap. kubectl create secret generic SECRET_NAME --from-literal=KEY=VALUE: Create a Secret. kubectl get configmap CONFIGMAP_NAME or kubectl get secret SECRET_NAME: List ConfigMaps or Secrets. Scaling and Autoscaling: kubectl scale deployment DEPLOYMENT_NAME --replicas=NUM_REPLICAS: Scale a deployment manually. kubectl autoscale deployment DEPLOYMENT_NAME --min=MIN_REPLICAS --max=MAX_REPLICAS --cpu-percent=CPU_PERCENT: Set up Horizontal Pod Autoscaling (HPA). Namespace Management: kubectl create namespace NAMESPACE_NAME: Create a new namespace. kubectl get namespaces: List all namespaces. kubectl config set-context --current --namespace=NAMESPACE_NAME: Change the default namespace for the current context. Resource Descriptions: kubectl get RESOURCE_NAME RESOURCE_IDENTIFIER: Get resource details (e.g., kubectl get pods my-pod). kubectl get RESOURCE_NAME --selector=LABEL_SELECTOR: Filter resources by labels. Logs and Events: kubectl logs POD_NAME: View the logs of a specific pod. kubectl describe pod POD_NAME: View events and information about a pod. Node and Cluster Information: kubectl get nodes: List all nodes in the cluster. kubectl describe node NODE_NAME: View detailed information about a node. Note These are just a selection of commonly used kubectl commands. You can explore more commands and options by running kubectl --help or kubectl COMMAND --help for specific command details. The Kubernetes documentation is also a valuable resource for in-depth information on managing Kubernetes clusters and resources.","title":"kubectl"},{"location":"tools/kubectl/#kubectl","text":"Kubernetes (K8s) is a powerful container orchestration platform with a rich set of command-line tools (kubectl) for managing and interacting with Kubernetes clusters. Here are some common kubectl commands and their usage:","title":"kubectl"},{"location":"tools/kubectl/#cluster-management","text":"kubectl cluster-info: Display cluster information, including the Kubernetes API server address. kubectl config get-contexts: List available Kubernetes contexts (clusters, users, and namespaces). kubectl config use-context CONTEXT_NAME: Set the active context to switch between clusters.","title":"Cluster Management:"},{"location":"tools/kubectl/#pod-management","text":"kubectl get pods: List all pods in the current namespace. kubectl describe pod POD_NAME: Display detailed information about a pod. kubectl create -f POD_DEFINITION.yaml: Create a pod using a YAML or JSON file. kubectl delete pod POD_NAME: Delete a pod. kubectl exec -it POD_NAME -- COMMAND: Execute a command inside a running pod.","title":"Pod Management:"},{"location":"tools/kubectl/#service-management","text":"kubectl get services: List all services in the current namespace. kubectl expose pod POD_NAME --port=SERVICE_PORT --type=SERVICE_TYPE: Create a service to expose a pod. kubectl delete service SERVICE_NAME: Delete a service.","title":"Service Management:"},{"location":"tools/kubectl/#deployment-management","text":"kubectl get deployments: List all deployments in the current namespace. kubectl create deployment DEPLOYMENT_NAME --image=IMAGE_NAME: Create a deployment. kubectl rollout status deployment/DEPLOYMENT_NAME: Check the status of a deployment rollout. kubectl rollout undo deployment/DEPLOYMENT_NAME: Rollback a deployment to a previous version.","title":"Deployment Management:"},{"location":"tools/kubectl/#configmaps-and-secrets","text":"kubectl create configmap CONFIGMAP_NAME --from-file=KEY=VALUE: Create a ConfigMap. kubectl create secret generic SECRET_NAME --from-literal=KEY=VALUE: Create a Secret. kubectl get configmap CONFIGMAP_NAME or kubectl get secret SECRET_NAME: List ConfigMaps or Secrets.","title":"ConfigMaps and Secrets:"},{"location":"tools/kubectl/#scaling-and-autoscaling","text":"kubectl scale deployment DEPLOYMENT_NAME --replicas=NUM_REPLICAS: Scale a deployment manually. kubectl autoscale deployment DEPLOYMENT_NAME --min=MIN_REPLICAS --max=MAX_REPLICAS --cpu-percent=CPU_PERCENT: Set up Horizontal Pod Autoscaling (HPA).","title":"Scaling and Autoscaling:"},{"location":"tools/kubectl/#namespace-management","text":"kubectl create namespace NAMESPACE_NAME: Create a new namespace. kubectl get namespaces: List all namespaces. kubectl config set-context --current --namespace=NAMESPACE_NAME: Change the default namespace for the current context.","title":"Namespace Management:"},{"location":"tools/kubectl/#resource-descriptions","text":"kubectl get RESOURCE_NAME RESOURCE_IDENTIFIER: Get resource details (e.g., kubectl get pods my-pod). kubectl get RESOURCE_NAME --selector=LABEL_SELECTOR: Filter resources by labels.","title":"Resource Descriptions:"},{"location":"tools/kubectl/#logs-and-events","text":"kubectl logs POD_NAME: View the logs of a specific pod. kubectl describe pod POD_NAME: View events and information about a pod.","title":"Logs and Events:"},{"location":"tools/kubectl/#node-and-cluster-information","text":"kubectl get nodes: List all nodes in the cluster. kubectl describe node NODE_NAME: View detailed information about a node. Note These are just a selection of commonly used kubectl commands. You can explore more commands and options by running kubectl --help or kubectl COMMAND --help for specific command details. The Kubernetes documentation is also a valuable resource for in-depth information on managing Kubernetes clusters and resources.","title":"Node and Cluster Information:"}]}